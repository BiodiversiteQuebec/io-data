import pystac
from datetime import datetime
import tempfile
from pathlib import Path
import urllib.request
import traceback
import csv
import sys
sys.path.append('/bqio/')
from lib.utils import upload_file_bq_io, push_to_api
from lib.pipelinelib import StacItem, Collection, BqIoStacPipeline
from pathlib import Path

class ThisStacItem(StacItem):

	# example of getting source tiff file from local path
	def getItemFile(self):

		try:
			self._tiff_local_file_location = Path(self._file_source_location)
		except Exception as err:
			print("Oops!  There was an error downloading the file: " + format(err)+'\n'+ traceback.format_exc())
			pass

		return

class ThisCollection(Collection):

	def createCollection(self):
		"""Overrides the implementation of createCollection from Parent class (Collection)"""
		
		spatial_extent = pystac.SpatialExtent(bboxes=[[-180, -0, 14, 84]])
		temporal_extent = pystac.TemporalExtent(intervals=[[datetime.fromisoformat("2005-01-01"),datetime.fromisoformat("2020-01-01")]])
		collection_extent = pystac.Extent(spatial=spatial_extent, temporal=temporal_extent)
		collection_id = 'cec_land_cover'
		collection_title = "CEC North American Land Cover"
		collection_description = 'Land cover map generated by the Commission for Environmental Cooperation (CEC) for North America at 30 meter resolution. The map contains 19 land cover categories. See http://www.cec.org/north-american-environmental-atlas/land-cover-30m-2020/.'
		collection_license = 'CC-0'
		collection_folder = 'CEC_land_cover'
		collection = self.createCollectionFromParams(collection_title=collection_title, collection_description=collection_description, collection_license = collection_license, spatial_extent=spatial_extent,temporal_extent=temporal_extent,collection_extent=collection_extent, collection_id=collection_id, collection_folder=collection_folder)
        
		return collection

	def createItemList(self):
		filename='NA_NALCMS_landcover_2020_30m.tif'
		folder="/bqio/CEC/land_cover_2020_30m_tif/NA_NALCMS_landcover_2020_30m/data/"
		name='cec_land_cover_2020'
		uri=folder+filename
		properties = {
			'full_filename': filename,
			'description': 'Land cover map for North America for 2020 at the 30 meter resolution.',
			'year': 2020,
			'categories' : {
				1:'Temperate or sub-polar needleleaf forest',
				2:'Sub-polar taiga needleleaf forest',
				3:'Tropical or sub-tropical broadleaf evergreen forest',
      			4:'Tropical or sub-tropical broadleaf deciduous forest',
				5:'Temperate or sub-polar broadleaf deciduous forest',
				6:'Mixed Forest',
				7:'Tropical or sub-tropical shrubland',
      			8:'Temperate or sub-polar shrubland',
      			9:'Tropical or sub-tropical grassland',
      			10:'Temperate or sub-polar grassland',
      			11:'Sub-polar or polar shrubland-lichen-moss',
      			12:'Sub-polar or polar grassland-lichen-moss',
      			13:'Sub-polar or polar barren-lichen-moss',
      			14:'Wetland',
      			15:'Cropland',
      			16:'Barren lands',
      			17:'Urban',
      			18:'Water',
      			19:'Snow and Ice',
			},
			'category_colors':{
				1:'rgb(0,61,0)',
				2:'rgb(148,156,112)',
				3:'rgb(0,99,0)',
      			4:'rgb(30,171,5)',
				5:'rgb(20,140,61)',
				6:'rgb(91,117,43)',
				7:'rgb(179,158,43)',
      			8:'rgb(179,138,51)',
      			9:'rgb(232,220,94)',
      			10:'rgb(225,207,138)',
      			11:'rgb(156,117,84)',
      			12:'rgb(186,212,143)',
      			13:'rgb(64,138,112)',
      			14:'rgb(107,163,138)',
      			15:'rgb(230,174,102)',
      			16:'rgb(168,171,174)',
      			17:'rgb(220,33,38)',
      			18:'rgb(76,112,163)',
      			19:'rgb(225,250,255)',
			},

		}
		newItem: ThisStacItem = ThisStacItem(name, filename, datetime.fromisoformat("2020-01-01"), properties, uri, "category", False)
		self.getItemList().append(newItem)

		return


thisCollection:ThisCollection = ThisCollection()

# params to create links of stac items for this collection
host:str = "https://object-arbutus.cloud.computecanada.ca/bq-io/io" # host name of the server stac will be located
#stac_api_host = "http://localhost:8082" # host where stac api is running
stac_api_host = "https://io.biodiversite-quebec.ca/stac/" # host where stac api is running

pipeline: BqIoStacPipeline = BqIoStacPipeline()
pipeline.setS3UploadFunc(upload_file_bq_io)
pipeline.setPushToApiFunc(push_to_api,stac_api_host)
pipeline.run(thisCollection,host)





	
