import pystac
from datetime import datetime
import tempfile
from pathlib import Path
import urllib.request
import traceback
import csv
import sys
sys.path.append('/bqio/')
from lib.utils import upload_file_bq_io, push_to_api
from lib.pipelinelib import StacItem, Collection, BqIoStacPipeline
from pathlib import Path

class ThisStacItem(StacItem):

	# example of getting source tiff file from local path
	def getItemFile(self):

		try:
			self._tiff_local_file_location = Path(self._file_source_location)
		except Exception as err:
			print("Oops!  There was an error downloading the file: " + format(err)+'\n'+ traceback.format_exc())
			pass

		return
	

class ThisCollection(Collection):

	def createCollection(self):
		"""Overrides the implementation of createCollection from Parent class (Collection)"""
		
		spatial_extent = pystac.SpatialExtent(bboxes=[[-180, -0, 14, 84]])
		temporal_extent = pystac.TemporalExtent(intervals=[[datetime.fromisoformat("2005-01-01"),datetime.fromisoformat("2020-01-01")]])
		collection_extent = pystac.Extent(spatial=spatial_extent, temporal=temporal_extent)
		collection_id = 'cec_land_cover_percentage'
		collection_title = "CEC North American Land Cover Percentage at 300 m resolution"
		collection_description = 'Percentager of each land cover at 300 m. reslution from land cover map generated by the Commission for Environmental Cooperation (CEC) for North America at 30 meter resolution. The collection contains one map for each of the 19 land cover categories. See http://www.cec.org/north-american-environmental-atlas/land-cover-30m-2020/.'
		collection_license = 'CC-0'
		collection_folder = 'CEC_land_cover_percentage'
		collection = self.createCollectionFromParams(collection_title=collection_title, collection_description=collection_description, collection_license = collection_license, spatial_extent=spatial_extent,temporal_extent=temporal_extent,collection_extent=collection_extent, collection_id=collection_id, collection_folder=collection_folder)
        
		return collection

	def createItemList(self):
		cats = {
				1:'Temperate or sub-polar needleleaf forest',
				2:'Sub-polar taiga needleleaf forest',
				3:'Tropical or sub-tropical broadleaf evergreen forest',
      			4:'Tropical or sub-tropical broadleaf deciduous forest',
				5:'Temperate or sub-polar broadleaf deciduous forest',
				6:'Mixed Forest',
				7:'Tropical or sub-tropical shrubland',
      			8:'Temperate or sub-polar shrubland',
      			9:'Tropical or sub-tropical grassland',
      			10:'Temperate or sub-polar grassland',
      			11:'Sub-polar or polar shrubland-lichen-moss',
      			12:'Sub-polar or polar grassland-lichen-moss',
      			13:'Sub-polar or polar barren-lichen-moss',
      			14:'Wetland',
      			15:'Cropland',
      			16:'Barren lands',
      			17:'Urban',
      			18:'Water',
      			19:'Snow and Ice',
		}
		for c in range(1,20):
			filename='CEC_land_cover_percent_class'+str(c)+'_2020-01-01.tif'
			folder="/bqio/CEC/"
			name='cec_land_cover_percent_class_'+str(c)
			uri=folder+filename
			properties = {
				'full_filename': filename,
				'category': cats[c],
				'description': 'Percentage of '+cats[c]+' land cover category in each 300 m. resolution cell from the CEC 30 m. resolution land cover map for North America for 2020',
				'year': 2020,				

			}
			newItem: ThisStacItem = ThisStacItem(name, filename, datetime.fromisoformat("2020-01-01"), properties, uri, "raw", False)
			self.getItemList().append(newItem)

		return


thisCollection:ThisCollection = ThisCollection()

# params to create links of stac items for this collection
host:str = "https://object-arbutus.cloud.computecanada.ca/bq-io/io" # host name of the server stac will be located
#stac_api_host = "http://localhost:8082" # host where stac api is running
stac_api_host = "https://io.biodiversite-quebec.ca/stac/" # host where stac api is running

pipeline: BqIoStacPipeline = BqIoStacPipeline()
pipeline.setS3UploadFunc(upload_file_bq_io)
pipeline.setPushToApiFunc(push_to_api,stac_api_host)
pipeline.run(thisCollection,host)	
