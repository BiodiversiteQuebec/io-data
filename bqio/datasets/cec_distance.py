import pystac
from datetime import datetime
import tempfile
from pathlib import Path
import urllib.request
import traceback
import csv
import sys
sys.path.append('/bqio/')
from lib.utils import upload_file_bq_io, push_to_api
from lib.pipelinelib import StacItem, Collection, BqIoStacPipeline
from pathlib import Path

class ThisStacItem(StacItem):

	# example of getting source tiff file from local path
	def getItemFile(self):

		try:
			self._tiff_local_file_location = Path(self._file_source_location)
		except Exception as err:
			print("Oops!  There was an error downloading the file: " + format(err)+'\n'+ traceback.format_exc())
			pass

		return
	

class ThisCollection(Collection):

	def createCollection(self):
		"""Overrides the implementation of createCollection from Parent class (Collection)"""
		
		spatial_extent = pystac.SpatialExtent(bboxes=[[-180, -0, 14, 84]])
		temporal_extent = pystac.TemporalExtent(intervals=[[datetime.fromisoformat("2005-01-01"),datetime.fromisoformat("2020-01-01")]])
		collection_extent = pystac.Extent(spatial=spatial_extent, temporal=temporal_extent)
		collection_id = 'cec_derived_maps'
		collection_title = "Rasters derived from CEC North American Land Cover map to serve as inputs for various pipelines."
		collection_description = 'Rasters at 300 m. resolution derived from the land cover map generated by the Commission for Environmental Cooperation (CEC) for North America at 30 meter resolution. See http://www.cec.org/north-american-environmental-atlas/land-cover-30m-2020/. These maps serve as inputs for various pipelines for species distribution and EBV modeling. '
		collection_license = 'CC-0'
		collection_folder = 'CEC_derived_maps'
		collection = self.createCollectionFromParams(collection_title=collection_title, collection_description=collection_description, collection_license = collection_license, spatial_extent=spatial_extent,temporal_extent=temporal_extent,collection_extent=collection_extent, collection_id=collection_id, collection_folder=collection_folder)
        
		return collection

	def createItemList(self):
		items = [{
			'id':'cec_coast_distance',
			'file':'CEC_Coast_Distance_300.tif',
			'description':'Distance to coastline derived from the 30 m. resolution CEC land cover map for 2020, resampled at 300 m. resolution'
			},
			{
				'id':'cec_water_distance',
				'file':'CEC_Water_Distance_300.tif',
				'description':'Distance to water bodies (class=18) derived from the 30 m. resolution CEC land cover map for 2020, resampled at 300 m. resolution'
			}]		
		for c in items:
			filename=c['file']
			folder="/bqio/CEC/"
			name=c['id']
			uri=folder+filename
			properties = {
				'full_filename': filename,
				'description': c['description'],
				'year': 2020,
				'units': 'meters'	
			}
			newItem: ThisStacItem = ThisStacItem(name, filename, datetime.fromisoformat("2020-01-01"), properties, uri, "raw", False)
			self.getItemList().append(newItem)

		return


thisCollection:ThisCollection = ThisCollection()

# params to create links of stac items for this collection
host:str = "https://object-arbutus.cloud.computecanada.ca/bq-io/io" # host name of the server stac will be located
#stac_api_host = "http://localhost:8082" # host where stac api is running
stac_api_host = "https://io.biodiversite-quebec.ca/stac/" # host where stac api is running

pipeline: BqIoStacPipeline = BqIoStacPipeline()
pipeline.setS3UploadFunc(upload_file_bq_io)
pipeline.setPushToApiFunc(push_to_api,stac_api_host)
pipeline.run(thisCollection,host)





	
